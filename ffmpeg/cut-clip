#!/bin/sh
# shellcheck disable=SC2046,SC2086,SC2181

input=
start=
duration=
to_pos=
ratio=
chapters=
output="clip$(date +%s).mp4"

show_help() {
    cat <<EOF
usage: $(basename "$0") [-c C] [-d T] [-i FILE] [-r FLOAT] [-s T] [-t T] [-o FILE]

-c chapters range
-d duration timestamp
-i input file (required)
-r ratio (0.5-2.0)
-s start timestamp
-t to position timestamp
-o output file (default: $output)
EOF
}

parse_args() {
    OPTIND=1
    while getopts 'c:d:i:o:r:s:t:' opt; do
        case $opt in
        c) chapters=$OPTARG ;;
        d) duration=$OPTARG ;;
        i) input=$OPTARG ;;
        o) output=$OPTARG ;;
        r)
            ratio=$OPTARG
            if [ $(echo "$ratio >= 0.5 && $ratio <= 2.0" | bc -l) -ne 1 ]; then
                echo "Invalid ratio '$ratio', should be in range 0.5-2.0"
                exit 1
            fi
            ;;
        s) start=$OPTARG ;;
        t) to_pos=$OPTARG ;;
        *)
            show_help
            exit 0
            ;;
        esac
    done

    shift $((OPTIND - 1))
    [ "${1:-}" = '--' ] && shift
}

parse_args "$@"
if [ -z "$input" ]; then
    show_help
    exit 1
fi

[ -n "${start}${duration}${to_pos}${ratio}${chapters}" ] || exit 0

if [ -n "$chapters" ]; then

    c_start="${chapters%%..*}"
    [ -z "$c_start" ] && c_start=1
    c_to="${chapters##*..}"
    [ -z "$c_to" ] && c_to=0

    if [ -z "${c_start}${c_to}" ]; then
        echo "Invalid chapters range '$chapters'"
        exit 1
    fi

    tmp_file=$(mktemp -t metadata.XXXXXXXXX)
    cleanup() {
        [ -f "$tmp_file" ] && rm -v "$tmp_file"
    }
    trap cleanup EXIT

    ffmpeg -y -i "$input" -f ffmetadata "$tmp_file" 2>/dev/null || {
        echo "FFMPEG ERROR!"
        exit 1
    }

    is_header_done=0
    chapter_num=0
    timebase=

    while read -r line; do
        if [ "$line" = '[CHAPTER]' ]; then
            is_header_done=1
            chapter_num=$((chapter_num + 1))
            continue
        elif [ $is_header_done -eq 0 ]; then
            continue
        fi

        case $line in
        TIMEBASE=1/*)
            if [ -z "$timebase" ]; then
                timebase="${line##*/}"
            fi
            ;;
        START=*)
            if [ $c_start -eq $chapter_num ]; then
                start_="${line##*=}"
                start=$((start_ / timebase))
            fi
            ;;
        END=*)
            if [ $c_to -eq $chapter_num ]; then
                to_="${line##*=}"
                to_pos=$((to_ / timebase))
            fi
            ;;

        esac
    done <"$tmp_file"

fi

cmd='ffmpeg -hide_banner -loglevel warning -stats'
if [ -n "$start" ]; then
    cmd="$cmd -ss $start"
fi

cmd="$cmd -i '$input'"
if [ -n "$duration" ]; then
    cmd="$cmd -t $duration"
elif [ -n "$to_pos" ]; then
    cmd="$cmd -to $to_pos"
fi

if [ -n "$ratio" ]; then
    probe="$(ffprobe -v quiet -show_streams -of json "$input")"
    if [ $? -ne 0 ]; then
        echo 'Probe failed'
        exit 1
    fi

    has_video=0
    if echo "$probe" | grep -q '"codec_type": "video"'; then
        has_video=1
    fi

    has_audio=0
    if echo "$probe" | grep -q '"codec_type": "audio"'; then
        has_audio=1
    fi

    if [ $has_video -eq 1 ] && [ $has_audio -eq 1 ]; then
        filter="-filter_complex '[0:v]setpts=PTS/${ratio}[v];[0:a]atempo=${ratio}[a]' -map [v] -map [a]"
    elif [ $has_video -eq 1 ]; then
        filter="-filter:v setpts=PTS/$ratio"
    elif [ $has_audio -eq 1 ]; then
        filter="-filter:a atempo=$ratio"
    else
        echo "No video or audio streams found in '$input'"
        exit 1
    fi
    cmd="$cmd $filter"
else
    cmd="$cmd -c copy"
fi

cmd="$cmd $output"

printf "%s\nExecute it? [Y/n]: " "$cmd"
read -r answ
case $answ in
n* | N*) exit 0 ;;
esac
eval "$cmd"
