#!/bin/sh

: "${YTDL_KEY_ICON:=youtube}"

die() {
    [ -n "$1" ] && notify-send -i "$YTDL_KEY_ICON" -a yt-dlp "$1"
    exit 1
}

DEFAULT_OUTPUT="$HOME/Videos/YouTube/%(uploader)s/%(title)s.%(ext)s"
DEFAULT_PL_OUTPUT="$HOME/Videos/YouTube/%(uploader)s/%(playlist_title)s/%(playlist_index)d %(title)s.%(ext)s"
HISTORY_DB="${XDG_DATA_HOME:-$HOME/.local/share}/playlist_ctl/playlist_ctl.db"

show_help() {
    cat <<EOF
Usage: $(basename "$0") [-u url] [-o output] [-O options] [-h] [-n] [-t] [-T options] [-H]

Options:
  -u  url to download, can be optional if url present in clipboard
  -o  output path, optional (default: '$DEFAULT_OUTPUT')
  -O  yt-dlp options
  -n  run now instead of task spooling
  -t  notify with video title instead of url
  -T  tsp options
  -H  log history to playlist-ctl compatible database
EOF
}

url=""
output=""
title=""
use_title=0
use_history=0
ytdl_opts=""
tsp_opts=""
is_now=0

parse_args() {
    OPTIND=1
    while getopts "u:o:O:T:Hhnt" opt; do
        case "$opt" in
        H) use_history=1 ;;
        O) ytdl_opts=$OPTARG ;;
        T) tsp_opts=$OPTARG ;;
        h)
            show_help
            exit 0
            ;;
        n) is_now=1 ;;
        o) output=$OPTARG ;;
        t) use_title=1 ;;
        u) url=$OPTARG ;;
        *) exit 1 ;;
        esac
    done

    shift $((OPTIND - 1))
    [ "${1:-}" = "--" ] && shift
}

parse_args "$@"

[ -n "$url" ] || url="$(xclip -o -selection clipboard)"
[ -n "$url" ] || die 'no url passed'

is_twitch=0
is_playlist=0
if echo "$url" | grep -qP '^(?:https\:\/\/)?(?:www\.)?twitch\.tv\/videos\/[0-9]{10}'; then
    is_twitch=1
elif echo "$url" | grep -qP '^(?:https\:\/\/)?(?:www\.)?(?:music\.)?(youtube\.com\/playlist\?list=[A-Za-z0-9\-_]{18,34})'; then
    is_playlist=1
else
    url_="$(echo "$url" | grep -oP '^(?:https://)?((?:www\.)?(?:music\.)?youtu(?:be\.com/watch\?v=|\.be/|be\.com/shorts/))[-_0-9a-zA-z]{11}')"
    [ -z "$url_" ] && die "invalid url '$url'"
    url="$url_"
fi

fetch_info() {
    curl -s "$(printf 'https://youtube.com/oembed?url=%s&format=json' "$url")" \
        -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0' \
        -H 'Accept-Language: en-US,en;q=0.5'
}

if [ $is_twitch -eq 0 ] && [ $use_title -eq 1 ]; then
    if [ $is_playlist -eq 0 ]; then
        title="$(fetch_info | jq -r '"\(.author_name) - \(.title)"')"
    else
        title="$(fetch_info | jq -r .title)"
    fi
fi

if [ -z "$output" ]; then
    output="$DEFAULT_OUTPUT"
    [ $is_playlist -eq 1 ] && output="$DEFAULT_PL_OUTPUT"
fi

[ -n "$title" ] || title="$url"

if [ $is_now -eq 1 ]; then
    yt-dlp $ytdl_opts "$url" -o "$output" || die "❌Download failed: '$title'"
else
    notify-send -i "$YTDL_KEY_ICON" -a yt-dlp "⬇️Start downloading '$title'..."
    qid="$(tsp $tsp_opts yt-dlp $ytdl_opts "$url" -o "$output" ||
        notify-send -i "$YTDL_KEY_ICON" -a yt-dlp "❌Download failed")"
    tsp -D "$qid" notify-send -i "$YTDL_KEY_ICON" -a yt-dlp "✅Download done: '$title'"
fi

if [ "$use_history" -eq 1 ]; then
    sqlite3 "$HISTORY_DB" \
        "INSERT OR IGNORE INTO titles (url, title, created) \
        VALUES ('$url', '$title', '$(date -Ins)');"
fi
