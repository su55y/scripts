#!/usr/bin/env -S python -u

import argparse
import re
import subprocess
import time
from typing import Optional, Dict

# FFMPEG_CMD = """ffmpeg -hide_banner -loglevel warning -stats {y} {start} {to}
#     -i {stream} {end} -c copy -avoid_negative_ts make_zero {output}"""
FFMPEG_CMD = """ffmpeg -hide_banner -loglevel warning -stats {y} {start} {to}
    -i {v_stream} {start} {to} -i {a_stream} {end} -map 0:v -map 1:a -avoid_negative_ts make_zero {output}"""
filters = {"ext": "mhtml", "filesize": None, "format_note": "storyboard"}


def parse_agrs() -> argparse.Namespace:
    rx_timestamp = re.compile(
        r"^(\d+|\d:[0-5]\d|[0-5]?\d:[0-5]\d|\d+:[0-5]\d:[0-5]\d)$"
    )
    rx_url = re.compile(
        r".*youtube\.com\/watch\?v=([\w\d_\-]{11})|.*youtu\.be\/([\w\d_\-]{11})|.*twitch\.tv\/videos\/(\d{10})$"
    )

    def validate_url(url: str) -> Optional[str]:
        if not rx_url.match(url):
            raise argparse.ArgumentTypeError("invalid url %r" % url)
        return url

    def validate_timestamp(timestamp: Optional[str] = None) -> Optional[str]:
        if timestamp is not None and not rx_timestamp.match(timestamp):
            raise argparse.ArgumentTypeError("invalid timestamp %r" % timestamp)
        return timestamp

    def validate_resolution(resolution: str) -> Optional[str]:
        if not re.match(r"^\d{3,4}x\d{3,4}$", resolution):
            raise argparse.ArgumentTypeError("invalid resolution %r" % resolution)
        return resolution

    parser = argparse.ArgumentParser(
        prog="clipmaker",
        description="Download clips from YouTube or Twitch",
    )
    parser.add_argument("url", type=validate_url, metavar="URL")
    parser.add_argument(
        "-s",
        "--start",
        type=validate_timestamp,
        metavar="T",
        help="clip start time (59/9:59/9:59:59)",
    )
    parser.add_argument(
        "-d",
        "--duration",
        type=validate_timestamp,
        metavar="T",
        help="clip duration (59/9:59/9:59:59)",
    )
    parser.add_argument(
        "-t",
        "--to",
        type=validate_timestamp,
        metavar="T",
        help="clip stop time (59/9:59/9:59:59)",
    )
    parser.add_argument(
        "-r",
        "--resolution",
        type=validate_resolution,
        default="1280x720",
        help="clip resolution (default: %(default)s)",
    )
    parser.add_argument(
        "-o",
        "--output",
        default=f"clip{time.strftime('%s')[-6:]}.mp4",
        metavar="PATH",
        help="output path (default: %(default)s)",
    )
    parser.add_argument(
        "-f",
        "--force",
        action="store_true",
        help="overwrite output file if exists",
    )
    parser.add_argument("-c", "--choose", action="store_true", help="choose format")
    parser.add_argument(
        "-C",
        "--choice",
        default="136+140",
        help="yt f22 related (default: %(default)r)",
    )
    return parser.parse_args()


def filter_formats(f: Dict) -> bool:
    for k, v in filters.items():
        if f.get(k) == v:
            return False
    return True


def choose_format(
    url: str, resolution: str, choose: bool, choice: str
) -> tuple[str, str]:
    try:
        from yt_dlp import YoutubeDL
    except ImportError as e:
        exit(f"{e}\nhttps://github.com/yt-dlp/yt-dlp#installation")

    with YoutubeDL() as ydl:
        info = ydl.extract_info(url, download=False)
        if not info or not isinstance(info, Dict):
            exit("can't extract info")
        if not info.get("formats"):
            exit("can't get formats from info")
        info["formats"] = filter(filter_formats, info["formats"])
        formats_map = {f["format_id"]: f for f in info["formats"]}

        if choose:
            print(ydl.render_formats_table({**info, "formats": formats_map.values()}))
            while True:
                choice = input("formats pair string: ")
                v, a = choice.split("+")
                if v not in formats_map.keys() or a not in formats_map.keys():
                    print("not found format %r" % choice)
                return formats_map[v]["url"], formats_map[a]["url"]
        else:
            v, a = choice.split("+")
            if v not in formats_map.keys() or a not in formats_map.keys():
                print("not found format %r" % choice)
            return formats_map[v]["url"], formats_map[a]["url"]
            # else:
            #     for f in formats_map.values():
            #         if not f.get("vcodec") or not f.get("acodec"):
            #             continue
            #         if f.get("resolution") == resolution:
            #             if not re.match(r"^https.+", url := f.pop("url")):
            #                 exit("can't get stream url from format: %s" % f)
            #             print("choosed format: %s" % f)
            #             return url
            # exit("resolution %r not available" % resolution)


if __name__ == "__main__":
    args = parse_agrs()
    v_url, a_url = choose_format(args.url, args.resolution, args.choose, args.choice)
    # old_cmd = FFMPEG_CMD.format(
    #     y="-y" if args.force else "",
    #     start="-ss %s" % (args.start or 0),
    #     to="-to %s" % args.to if args.to else "",
    #     stream=url,
    #     end="-t %s" % args.duration if args.duration else "",
    #     output=args.output,
    # ).split()
    cmd = FFMPEG_CMD.format(
        y="-y" if args.force else "",
        start="-ss %s" % (args.start or 0),
        to="-to %s" % args.to if args.to else "",
        v_stream=v_url,
        a_stream=a_url,
        end="-t %s" % args.duration if args.duration else "",
        output=args.output,
    ).split()

    subprocess.run(cmd)
