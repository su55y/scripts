#!/usr/bin/env -S python -u

import argparse
from functools import cached_property
import re
import subprocess
import time
from typing import Any
from urllib.parse import urlparse, parse_qs

from yt_dlp import YoutubeDL

FFMPEG_CMD = """ffmpeg -hide_banner -loglevel warning -stats {y} {start} {to}
-i {stream} {end} -c copy -avoid_negative_ts make_zero {output}"""
FFMPEG_CMD_YT = """ffmpeg -hide_banner -loglevel warning -stats {y} {start} {to}
    -i {v_stream} {start} {to} -i {a_stream} {end} -map 0:v -map 1:a -avoid_negative_ts make_zero {output}"""

YT_PATTERN = r".*youtu(?:be\.com/watch\?v=|\.be/|be\.com/shorts/)[-_0-9a-zA-Z]{11}"
TW_PATTERN = r".*twitch\.tv/videos/\d{10}"
YT_FMT_PAIR_PATTERN = r"^\d{2,3}\+\d{2,3}(?:\-\d+)?$"

DEFAULT_RESOLUTION = "1280x720"


def parse_agrs() -> argparse.Namespace:
    rx_timestamp = re.compile(
        r"^(\d+|\d:[0-5]\d|[0-5]?\d:[0-5]\d|\d+:[0-5]\d:[0-5]\d)$"
    )

    def validate_timestamp(timestamp: str | None = None) -> str | None:
        if timestamp is not None and not rx_timestamp.match(timestamp):
            raise argparse.ArgumentTypeError("invalid timestamp %r" % timestamp)
        return timestamp

    def validate_resolution(resolution: str) -> str | None:
        if not re.match(r"^\d{3,4}x\d{3,4}$", resolution):
            raise argparse.ArgumentTypeError("invalid resolution %r" % resolution)
        return resolution

    def clean_url(u: str) -> str:
        rxl = r"^((?:https://)?(?:www\.)?youtube\.com/watch\?v=[-_0-9a-zA-Z]{11})(?:(?:.*)?(&t=[0-9]+)(?:.*)?)?$"
        rxs = r"^((?:https://)?youtu\.be/[-_0-9a-zA-Z]{11})(?:(\?)(?:.*)?(t=[0-9]+)(?:.*)?)?$"
        if (m := re.match(rxl, u)) and len(m.groups()) > 0:
            u = "".join(g for g in m.groups() if g)
        elif (m := re.match(rxs, u)) and len(m.groups()) > 0:
            u = "".join(g for g in m.groups() if g)
        return u

    parser = argparse.ArgumentParser(
        prog="clipmaker",
        description="Download clips from YouTube or Twitch",
    )
    parser.add_argument("url", metavar="URL", type=clean_url)
    parser.add_argument(
        "-s",
        "--start",
        type=validate_timestamp,
        metavar="T",
        help="clip start time (59/9:59/9:59:59)",
    )
    parser.add_argument(
        "-d",
        "--duration",
        type=validate_timestamp,
        metavar="T",
        help="clip duration (59/9:59/9:59:59)",
    )
    parser.add_argument(
        "-t",
        "--to",
        type=validate_timestamp,
        metavar="T",
        help="clip stop time (59/9:59/9:59:59)",
    )
    parser.add_argument(
        "-r",
        "--resolution",
        type=validate_resolution,
        default=DEFAULT_RESOLUTION,
        help=f"clip resolution (default: %(default)s)",
    )
    parser.add_argument(
        "-o",
        "--output",
        default=f"clip{time.strftime('%s')}.mp4",
        metavar="PATH",
        help="output path (default: %(default)s)",
    )
    parser.add_argument(
        "-F",
        "--force",
        action="store_true",
        help="overwrite output file if exists",
    )
    parser.add_argument(
        "-c", "--choose", action="store_true", help="print available formats to choose"
    )
    parser.add_argument(
        "-f",
        "--format",
        help=f"formats pair string",
    )
    return parser.parse_args()


class Clipmaker:
    def __init__(
        self,
        *,
        url: str,
        output: str,
        choose: bool = False,
        force: bool = False,
        format: str | None = None,
        start: str | None = None,
        duration: str | None = None,
        to: str | None = None,
        resolution: str | None = None,
    ) -> None:
        self.url = url
        self.output = output
        self.choose = choose
        self.force = force
        self.format = format
        self.start = start
        if not self.start:
            self.parse_url()
        self.duration = duration
        self.to = to
        self.resolution = resolution
        self.format_id: str = ""

    def build_cmd(self) -> str:
        url = v_url = a_url = ""
        ffmpeg_cmd = FFMPEG_CMD

        def choose():
            nonlocal url, v_url, a_url
            self.print_formats_table()
            while True:
                inp = input("choose format: ")
                if re.match(YT_FMT_PAIR_PATTERN, inp):
                    v, a = inp.split("+")
                    if self.check_formats_pair(v, a):
                        v_url = self.formats_map[v]["url"]
                        a_url = self.formats_map[a]["url"]
                        break
                elif inp in self.formats_map:
                    url = self.formats_map[inp]["url"]
                    break
                else:
                    print(f"invalid format {inp!r}")

        if self.choose:
            choose()
        elif not re.match(YT_PATTERN, self.url) or (
            self.format and not re.match(YT_FMT_PAIR_PATTERN, self.format)
        ):
            url = self.get_stream()
        elif self.resolution and (purl := self.premuxed_url()):
            url = purl
        else:
            ffmpeg_cmd = FFMPEG_CMD_YT
            v_url, a_url = self.get_yt_streams()

        if len(url + v_url + a_url) == 0:
            choose()

        return ffmpeg_cmd.format(
            y="-y" if self.force else "",
            start="-ss %s" % (self.start or 0),
            to=f"-to {self.to}" if self.to else "",
            stream=url,
            v_stream=v_url,
            a_stream=a_url,
            end=f"-t {self.duration}" if self.duration else "",
            output=self.output,
        )

    def get_stream(self) -> str:
        if self.format:
            if f := self.formats_map.get(self.format):
                return f["url"]
            print(f"format {self.format!r} not found")
        for f in self.formats_map.values():
            if f.get("resolution") == self.resolution and f.get("acodec") is not None:
                return f["url"]
        else:
            print(f"resolution {self.resolution!r} not found")
            return ""

    def get_yt_streams(self) -> tuple[str, str]:
        _ = self.formats_map
        if self.resolution:
            return self.yt_streams_by_resolution()
        elif not self.format:
            self.format = self.format_id
        v, a = self.format.split("+")
        if not self.check_formats_pair(v, a):
            exit(1)

        return self.formats_map[v]["url"], self.formats_map[a]["url"]

    def yt_streams_by_resolution(self) -> tuple[str, str]:
        v = ""
        a = ""
        if len(self.format_id.split("+")) == 2:
            _, af = self.format_id.split("+")
            a = self.formats_map.get(af, {"url": ""})["url"]
        for f in self.formats_map.values():
            if not v and self.resolution == f.get("resolution", "-"):
                v = f["url"]
                break
            if not a and f.get("resolution", "-") == "audio only":
                a = f["url"]
        else:
            exit(f"resolution {self.resolution!r} not found")

        return v, a

    @cached_property
    def formats_map(self) -> dict[str, Any]:
        with YoutubeDL() as ydl:
            info = ydl.extract_info(self.url, download=False)
            if not info or not isinstance(info, dict):
                exit("can't extract info")
            if not info.get("formats"):
                exit("can't get formats from info")

            self.format_id = info.get("format_id", "")
            return {f["format_id"]: f for f in filter(filter_format, info["formats"])}

    def print_formats_table(self) -> None:
        with YoutubeDL() as ydl:
            print(ydl.render_formats_table({"formats": self.formats_map.values()}))

    def check_formats_pair(self, v: str, a: str) -> bool:
        for f in [v, a]:
            if f not in self.formats_map:
                print(f"format {f!r} not found")
                return False
        return True

    def premuxed_url(self) -> str | None:
        for f in self.formats_map.values():
            if (
                f.get("vcodec")
                and f.get("acodec")
                and f.get("acodec") != "none"
                and f.get("resolution") == self.resolution
            ):
                return f.get("url")

    def parse_url(self) -> None:
        params = parse_qs(urlparse(self.url).query)
        if "t" in params:
            self.start = params["t"][0]


def filter_format(formats: dict[str, Any]) -> bool:
    filters = {"ext": "mhtml", "format_note": "storyboard"}
    for k, v in filters.items():
        if formats.get(k) == v:
            return False
    return True


def main():
    args = parse_agrs()
    subprocess.run(Clipmaker(**vars(args)).build_cmd().split())


if __name__ == "__main__":
    main()
